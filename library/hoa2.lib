//NEW VERSION OF THE REGULAR DECODER => TO UPDATE IN HOA.LIB
//
//--------------------------`(ho.)decoder`--------------------------------
// Decodes an ambisonics sound field for a circular array of loudspeakers.
//
// #### Usage
//
// ```
// _ : decoder(n, p) : _
// ```
//
// Where:
//
// * `n`: the order
// * `p`: the number of speakers
//
// #### Note
//
// Number of loudspeakers must be greater or equal to 2n+1. It's preferable
// to use 2n+2 loudspeakers.
//-------------------------------------------------------------------

decoder(n, p) = par(i, 2*n+1, _) <: par(i, p, speaker(n, 2*ma.PI*i/p))
with {
   speaker(n,a)	= /(2), par(i, 2*n, _), encoder(n, 2/p, a) : si.dot(2*n+1);
};


//-------`(ho.)rEncoder`----------
// Ambisonic encoder in 2D including source rotation
// a mono signal is encoded at at certain ambisonic order
// with two possible modes: either rotation with an angular speed, or static with a fixed angle.

// `rEncoder` is a standard Faust function.
//
// #### Usage
//
// ```
// _ : rEncoder(n, sp, a, it) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 outputs to the encoder2 function)
// * `sp': the azimuth speed expressed as angular speed (2PI/sec)
// * `a`: the fixed azimuth when the rotation stops (sp = 0) in radians
// * 'it' : interpolation time (in milliseconds) between the rotation and the fixed modes.
//-----------------------------

rEncoder(n, sp, a, it) = thisEncoder
	with {
            basicEncoder(sig, angle) = ho.encoder(n, sig, angle);
			thisEncoder = (_, rotationOrStaticAngle) : basicEncoder
				with {
						//converting the static angle from radians to [0; 1]
						an = (a / (2 * ma.PI), 1) : fmod;
						rotationOrStaticAngle = ((1-vn) * x + vn * an) * 2 * ma.PI;
						//to manage the case where frequency is zero, smoothly switches from one mode to another//
						vn = (sp == 0) : si.smooth(ba.tau2pole(it));
						x = (os.phasor(1, sp), an, 1) : (+, _) : fmod;
				};
};


//-------`(ho.)gDecoderStereo`----------
// Ambisonic general stereo decoder in 2D
// with control of the direction of implementation of the 2 loudspeakers (either direct (clockwise) or not)
// and output amplitude

// `gDecoderStereo` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_,... : gDecoderStereo(n,d,g) : _,_
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs to the decoderStereo2 function)
// * 'direct': 1 for direct mode, -1 for the indirect mode (changes the rotation direction)
// * `g`: global output gain between 0 and 1
//-----------------------------

gDecoderStereo(n, direct, g) = thisStereoDecoder
	with {
			//direct is direct mode (1) or indirect mode (-1)
			//g is the absolute gain
			leftDispatcher = _<:(*(1-direct), *(direct));
			rightDispatcher = _<:(*(direct), *(1-direct));
			thisStereoDecoder =  ho.decoderStereo(n) : (*(g), *(g)) : (leftDispatcher, rightDispatcher) :> (_, _);
};


//-------`(ho.)circularScaledVBAP`----------
// Circular scaled VBAP with all loudspeakers and the virtual source on the unit-circle

// `circularScaledVBAP` is a standard Faust function.
//
// #### Usage
//
// ```
// _ : circularScaledVBAP(l, t) : _,_,...
// ```
//
// Where:
//
// * `l' : the list of angles of the loudspeakers in degrees, for instance (0, 85, 182, 263) for four loudspeakers
// * 't' : the current angle of the virtual source in degrees
//-----------------------------

circularScaledVBAP(l, t) = thisCircularVbap with {
		//modulo indexes between 1 and the number of elements of the list
		modIndex(i, l) = ma.modulo(i, outputs(l)) + 1;
		//
		//pick up the ith angle with a 360 degree modulo
		getElt(i, l) = ma.modulo(ba.take(modIndex(i, l), l), 360);
		//
		//function to compute the sinus of the difference between angles expressed in degrees
		diffSin(u, v) = sin((v - u) * ma.PI / 180.);
		//
		//permutations to be used to compute scaledVBAPGain
		p1(a, b, c, d) = (b, c, d, a);
		p2(a, b, c, d) = (a, c, b, d);
		//
		//computation of the scaled VBAP gain of a pair
		scaledVBAPGain(t1, t2, t) = ((diffSin(t2, t) <:(_, _, _)), (ma.signum(diffSin(t2, t1)) <: (_, _)), (diffSin(t, t1) <:(_, _, _))) : (*, *, *, *) : p1 : (_, _, (+ : sqrt <: (_, _))) : p2 : (/, /);
		sVBAPGain(i, l, t) = scaledVBAPGain(getElt(i, l), getElt(i+1, l), t);
		//
		//computes the left and the right gains using the matrix inversion (VBAP)
		leftGain(i, l, t) = sVBAPGain(i, l, t) : (_, !);
		rightGain(i, l, t) = sVBAPGain(i, l, t) : (!, _);
		//computation of boolean activePair that determines whether the pair of LS is active or not
		//we have to distinguish leftGain >0 and rightGain >= 0
		//if we put >=0 for both, two pairs will be simultaneously active when theta is one of the loudspeaker angles in the list
		//if we put > 0 for both, all the pairs will be inactive when theta is one of the loudspeaker angles in the list
		activePair(i, l, t) = (leftGain(i, l, t) > 0) * (rightGain(i, l, t) >= 0);
		//
		//computes the total gain for each loudspeaker
		cumulatedGain(i, l, t) = rightGain(outputs(l)+i-1, l, t) * activePair(outputs(l)+i-1, l, t) + leftGain(i, l, t) * activePair(i, l, t);
		//
		thisCircularVbap = _ <: par(i, outputs(l), *(cumulatedGain(i, l, t)));
};


//-------`(ho.)imlsDecoder`----------
// Irregular decoder in 2D for an irregular multi-loudspeaker configuration
// using 2D VBAP for compensation
//
// `imlsDecoder` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_,... : imlsDecoder(n,la, direct, shift) : _,_,...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs to the 2dstereodecoder function)
// * `la` : the list of angles in degrees, for instance (0, 85, 182, 263) for four loudspeakers
// * `direct`: 1 for direct mode, -1 for the indirect mode (changes the rotation direction)
// * `shift` : angular shift in degrees to easily adjust angles
//-----------------------------

imlsDecoder(n, la, direct, shift) = si.bus(2*n+1) : iVBAPDecoder
	with {
			p = outputs(la);
			vbapon = par(i, p, *(vb));
			vbapoff = par(i, p, *(1-vb));
			//The VBAP decoder uses VBAP compensation: it balances the regular decoder output enabling to use irregular angular setup.
			q = max(2*n+2, p);
			iVBAPDecoder = ho.decoder(n, q) : par(i, q, circularScaledVBAP(la, (i * 360 / q - direct * shift) * direct)) :> si.bus(p);
};

//The basic decoder projects the incoming ambisonic situation to the LS situation whatever it is, without compensation
/*
iBasicDecoder = (par(i, 2*n+1, _) <: par(i, p, speaker(n, ang(i))))
	with {
			ang(i) = (ba.take(i+1, la)  - direct * shift) * direct * ma.PI / 180.;
   			speaker(n,alpha) = /(2), par(i, 2*n, _), ho.encoder(n,2/p,alpha) : si.dot(2*n+1);
};
*/

//-------`(ho.)iDecoder`----------
// General decoder in 2D enabling an irregular multi-loudspeaker configuration
// and to switch between multi-channel and stereo
//
// `iDecoder` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_,... : iDecoder(n, la, direct, st, g) : _,_
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs to the decoder2_ui function)
// * 'la': the list of angles in degrees
// * 'direct': 1 for direct mode, -1 for the indirect mode (changes the rotation direction)
// * 'shift' : angular shift in degrees to easily adjust angles
// * 'st': 1 for stereo, 0 for multi-loudspeaker configuration. When 1, stereo sounds goes through the first two channels
// * 'g' : gain between 0 and 1
//-----------------------------

iDecoder(n, la, direct, shift, st, g) = thisDecoder
	with {
			//p is the number of outputs
            p = outputs(la);
			ambi = 1 - st;
			//
			//for stereo decoding
			paddedStereoDecoder(n, p) = (gDecoderStereo(n, direct, g), (0 <: si.bus(p-2)));
			//
			thisDecoder = si.bus(2*n+1) <: (si.bus(2*n+1), si.bus(2*n+1)) : (imlsDecoder(n, la, direct, shift), paddedStereoDecoder(n, p)) : (par(i, p, *(ambi)), *(st), *(st), si.bus(p-2))  :> si.bus(p) : par(i, p, *(g));
};


//-------`(ho.)optim`----------
// Ambisonic optimizer including the three elementary optimizers:
// - (ho).optimBasic, (ho).optimMaxRe, (ho.)optimInPhase
//----------------`optimBasic`-------------------------
//The basic optimization has no effect and should be used for a perfect 
//circle of loudspeakers with one listener at the perfect center loudspeakers 
//array.
//----------------`optimMaxRe`-------------------------
//The maxRe optimization optimize energy vector. It should be used for an 
//auditory confined in the center of the loudspeakers array.
//----------------`optimInPhase`-------------------------
//The inPhase Optimization optimize energy vector and put all loudspeakers signals 
//in phase. It should be used for an auditory.

// `optim` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_, ... : optim(n, ot) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs and outputs to the optim function)
// * 'ot' : optimization type (0 for optimBasic, 1 for optimMaxRe, 2 for optimInPhase)
//-----------------------------

optim(n, ot) = thisOptimizer
	with {
			optb = (ot == 0) : si.smoo;
			optm = (ot == 1) : si.smoo;
			opti = (ot == 2) : si.smoo;
			interlace(n) = si.bus(2*n) <: par(i, n, (ba.selector(i, 2*n), ba.selector(i+n, 2*n)));
			thisOptimizer = ((si.bus(2*n+1)  <: ((si.bus(2*n+1):ho.optimBasic(n)), (si.bus(2*n+1):ho.optimMaxRe(n)), (si.bus(2*n+1):ho.optimInPhase(n)))), ((optb <: si.bus(2*n+1)), (optm <: si.bus(2*n+1)), (opti <: si.bus(2*n+1)))) : interlace(6*n+3) : par(i, 6*n+3, *) :> si.bus(2*n+1);
};


//-------`(ho.)mirror`----------
// Mirroring effect on the sound field

// `mirror` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_, ... : mirror(n, fa) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs and outputs to the mirror function)
// * 'fa' : mirroring type (1=original sound field; 0=original+mirrored sound field; -1=mirrored sound field)
//-----------------------------
mirror(n, fa) = (*(1), par(i, n, (*(fa), *(1))));


//-------`(ho.)scope`----------
// Produces an XY pair of signals representing the ambisonic sound field

// `scope` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_, ... : scope(n, rt) : _,_
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs to the mirror function)
// * 'rt' : refreshment time in milliseconds
//-----------------------------
scope(n, rt) = thisScope
		with {
				//Angle sweeping at a speed corresponding to refresh period between 0 and 2*PI
				theta = os.phasor(1, 1/rt) * 2 * ma.PI;
				//we get the vector of harmonic functions thanks to the encoding function//
                harmonicsVector = ho.encoder(n, 1, theta);
				//
				normalizedVector(n) = si.bus(n) <: (si.bus(n), norm) : interlace2(n) : par(i, n, /)
				with {
					norm = par(i, n, _ <:(_,_) : *) :> _ : sqrt <: ((_ == 0), (_ > 0), _) : (_, *) : + <: si.bus(n);
					interlace2(n) = si.bus(2*n) <: par(i, n, (ba.selector(i, 2*n), ba.selector(i+n, 2*n)));
				};
				//building (2n+1) normalized vectors
				inputVector = (*(0.5), par(i, (2*n), _)) : normalizedVector(2*n+1);
				normalizedHarmonics = harmonicsVector : normalizedVector(2*n+1);
				//
				rho = (inputVector, normalizedHarmonics) : si.dot(2*n+1) ;
				thisScope = (rho <: (ma.fabs, (_ >= 0))) : ((_ <: (_, _)), _) : (*(sin(theta)), *(cos(theta)), _) : (*(-1), _, _);	
};


//-------`(ho.)stereoEncoder`----------
// Encoding of a stereo pair of channels with symetric angles (a/2, -a/2)

// `stereoEncoder` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_ : stereoEncoder(n, a) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 outputs to the stereoEncoding function)
// * 'a' : opening angle in radians, left channel at a/2 angle, right channel at -a/2 angle
//-----------------------------

stereoEncoder(n, a) = (leftEncoder, rightEncoder) :> si.bus(2*n+1)
		with {
				basicEncoder(sig, angle) = ho.encoder(n, sig, angle);
				leftEncoder = (_, a / 2) : basicEncoder;
				rightEncoder = (_, -a /2) : basicEncoder;
};


//-------`(ho.)multiEncoder`----------
// Encoding of a set of p signals distributed on the unit circle according to a list of p speeds and p angles

// `multiEncoder` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_,... : multiEncoder(n, ls, la, it) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 outputs to the stereoEncoding function)
// * 'ls' : a list of speeds in turns by second (one speed per signal)
// * 'la' : a list of angles in radians on the unit circle to localize the sources (one angle per signal)
// * 'it' : interpolation time (in milliseconds) between the rotation and the fixed modes.
//-----------------------------
/*
multiEncoder(n, la) = par(i, p, ((_, ba.take(i+1, la)) : basicEncoder)) :> si.bus(2*n+1)
		with {
				p = outputs(la);
				basicEncoder(sig, angle) = ho.encoder(n, sig, angle);
};
*/

multiEncoder(n, lspeed, langle, it) = par(i, p, thisEncoder(ba.take(i+1, lspeed), ba.take(i+1, langle), it)) :> si.bus(2*n+1)
		with {
				p = outputs(langle); //supposed to be the same as outputs(lspeed)
				basicEncoder(sig, angle) = ho.encoder(n, sig, angle);
				thisEncoder(sp, a, it) = (_, rotationOrStaticAngle) : basicEncoder
				with {
						//converting the static angle from radians to [0; 1]
						an = (a / (2 * ma.PI), 1) : fmod;
						rotationOrStaticAngle = ((1-vn) * x + vn * an) * 2 * ma.PI;
						//to manage the case where frequency is zero, smoothly switches from one mode to another//
						vn = (sp == 0) : si.smooth(ba.tau2pole(it));
						x = (os.phasor(1, sp), an, 1) : (+, _) : fmod;
				};
};


//-------`(ho.).fxDecorrelation`----------
// Spatial ambisonic decorrelation in fx mode

// `fxDecorrelation` is a standard Faust function.
//
// fxDecorrelation applies decorrelations to spatial components already created.
// The decorrelation is defined for each #i spatial component among P=2*n+1 at the ambisonic order n
// as a delay of 0 if factor fa is under a certain value 1-(i+1)/P and d*F((i+1)/p) in the contrary case,
// where d is the maximum delay applied (in samples) and F is a distribution function for durations.
// The user can choose this delay time distribution among 22 different ones.
// The delay increases according to the index of ambisonic components.
// But it increases at each step and it is modulated by a threshold.
// Therefore, delays are progressively revealed when the factor increases:
// - when the factor is close to 0, only upper components are delayed ;
// - when the factor increases, moire and more components are delayed.
//
//H					THRESHOLD			DELAY
//0					1-1/P				0 OR DELAY*F(1/P)
//-1				1-2/P				0 OR DELAY*F(2/P)
//1					1-3/P				0 OR DELAY*F(3/P)
//-2				1-4/P				0 OR DELAY*F(4/P)
//2					1-5/P				0 OR DELAY*F(5/P)
//...
//-(N-1)			1-(P-3)/P			0 OR DELAY*F((P-3)/P)
//(N-1)				1-(P-2)/P			0 OR DELAY*F((P-2)/P)
//-N				1-(P-1)/P			0 OR DELAY*F((P-1)/P)
//N					1-P/P				0 OR DELAY*F(P/P)
//
//
// #### Usage
//
// ```
// _,_, ... : fxDecorrelation(n, d, wf, fa, fd, tf) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs and outputs to the mirror function)
// * 'd': the maximum delay applied (in samples)
// * 'wf': window frequency (in Hz) for the overlapped delay
// * 'fa': decorrelation factor (between 0 and 1)
// * 'fd': feedback / level of reinjection (between 0 and 1)
// * 'tf': type of function of delay distribution (integer, between 0 and 21)
//-----------------------------
fxDecorrelation(n, d, wf, fa, fd, tf) = par(i, 2*n+1, gate(d, i, 2*n+1, fa, tf, wf, fd))
			with {
                gate(d, i, n, fa, tf, wf, fd) = _ <: fdOverlappedDelay(dur(d, i, n, fa, tf), 262144, wf, fd) * env1(fa, i, n), _ * env1c(fa, i, n) : + ;
				//
				fdOverlappedDelay(nsamp, nmax, freq, fdbk) = (+ : de.sdelay(nmax, int(ma.SR / freq), nsamp)) ~ (*(fdbk));
                //
                env1(fa, i, n) = (fa > ((n-i-1)/n)) : si.smooth(ba.tau2pole(0.005));
                env1c(fa, i, n) = 1 - env1(fa, i, n);
                //
				//computes the ith duration of the ith delay in samples with twenty two possibilities of distribution
				elemdur(d, i, p, fa, tf, ind) = (tf == ind) * (fa > (1 - x)) * d * x * fa
					with {
							x = th(ind, i, p);
					};
				//duration in samples computed as a sum of the 22 cases//
				dur(d, i, p, fa, tf) = sum(ind, 22, elemdur(d, i, p, fa, tf, ind)) : int;
};

//-------`(ho.).synDecorrelation`----------
// Spatial ambisonic decorrelation in syn mode

// `synDecorrelation` is a standard Faust function.
//
// synDecorrelation generates spatial decorrelated components in ambisonics from one mono signal.
// The decorrelation is defined for each #i spatial component among P=2*n+1 at the ambisonic order n
// as a delay of 0 if factor fa is under a certain value 1-(i+1)/P and d*F((i+1)/p) in the contrary case,
// where d is the maximum delay applied (in samples) and F is a distribution function for durations.
// The user can choose this delay time distribution among 22 different ones.
// The delay increases according to the index of ambisonic components.
// But it increases at each step and it is modulated by a threshold.
// Therefore, delays are progressively revealed when the factor increases:
// - when the factor is close to 0, only upper components are delayed ;
// - when the factor increases, moire and more components are delayed.
// When the factor is between [0; 1/P], upper harmonics are progressively faded and the level of the H0 component is compensated
// to avoid source localization and to produce a large mono.
//
//H					THRESHOLD			DELAY
//0					1-1/P				0 OR DELAY*F(1/P)
//-1				1-2/P				0 OR DELAY*F(2/P)
//1					1-3/P				0 OR DELAY*F(3/P)
//-2				1-4/P				0 OR DELAY*F(4/P)
//2					1-5/P				0 OR DELAY*F(5/P)
//...
//-(N-1)			1-(P-3)/P			0 OR DELAY*F((P-3)/P)
//(N-1)				1-(P-2)/P			0 OR DELAY*F((P-2)/P)
//-N				1-(P-1)/P			0 OR DELAY*F((P-1)/P)
//N					1-P/P				0 OR DELAY*F(P/P)
//
//
// #### Usage
//
// ```
// _,_, ... : fxDecorrelation(n, d, wf, fa, fd, tf) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs and outputs to the mirror function)
// * 'd': the maximum delay applied (in samples)
// * 'wf': window frequency (in Hz) for the overlapped delay
// * 'fa': decorrelation factor (between 0 and 1)
// * 'fd': feedback / level of reinjection (between 0 and 1)
// * 'tf': type of function of delay distribution (integer, between 0 and 21)
//-----------------------------

synDecorrelation(n, d, wf, fa, fd, tf) =  _ <: par(i, 2*n+1, crossFade(d, i, 2*n+1, fa, tf, wf, fd))
			with {
				crossFade(d, i, n, fa, tf, wf, fd) = _ <: fdOverlappedDelay(dur(d, i, n, fa, tf), 262144, wf, fd) * env1(fa, i, n), _ * env1c(fa, i, n) :> _ * env2(fa, i, n);
                //
				fdOverlappedDelay(nsamp, nmax, freq, fdbk) = (+ : de.sdelay(nmax, int(ma.SR / freq), nsamp)) ~ (*(fdbk));
				//
                env1(fa, i, n) = (fa > ((n-i-1)/n)) : si.smooth(ba.tau2pole(0.005));
				env1c(fa, i, n) = 1 - env1(fa, i, n) ; 
				env2(fa, i, n) = ((i > 0) * n * min(fa, 1/n)) + ((i == 0) * (sqrt(n) * (1 - (n - sqrt(n)) * min(fa, 1/n)))) : si.smooth(ba.tau2pole(0.005));
                //
				//computes the ith duration of the ith delay in samples with twenty two possibilities of distribution
				elemdur(d, i, p, fa, tf, ind) = (tf == ind) * fa * d * x
					with {
							x = th(ind, i, p);
					};
				//duration in samples computed as a sum of the 22 cases//
				dur(d, i, p, fa, tf) = sum(ind, 22, elemdur(d, i, p, fa, tf, ind)) : int;
};

//-------`(ho.).fxRingMod`----------
// Spatial ring modulation in syn mode

// `fxRingMod` is a standard Faust function.
//
//SYN RINGMOD GENERATES SPATIAL COMPONENTS IN AMBISONICS FROM ONE MONO SIGNAL THANKS TO RING MODULATION
// fxRingMod applies ring modulation to spatial components already created.
// The ring modulation is defined for each spatial component among P=2*n+1 at the abmisonic order n.
// For each spatial component #i, the result is either the original signal or a ring modulated signal
// according to a threshold that is i/P.
// The general process is drive by a factor fa between 0 and 1 and a modulation frequency f0.
// if fa is greater than theshold (P-i-1)/P, the ith ring modulator is on with carrier frequency of f0*(i+1)/P.
// On the contrary, it provides the original signal.
// Therefore ring modulators are progressively revealed when fa increases.
//
//H					THRESHOLD			    OUTPUT
//0					(P-1)/P					ORIGINAL OR RING MODULATION BY F0*1/P
//-1				(P-2)/P					ORIGINAL OR RING MODULATION BY F0*2/P
//1					(P-3)/P			        ORIGINAL OR RING MODULATION BY F0*3/P
//-2				(P-4)/P			        ORIGINAL OR RING MODULATION BY F0*4/P
//2					(P-5)/P			        ORIGINAL OR RING MODULATION BY F0*5/P
//...
//-(N-1)			3/P				        ORIGINAL OR RING MODULATION BY F0*(P-3)/P
//(N-1)				2/P				        ORIGINAL OR RING MODULATION BY F0*(P-2)/P
//-N				1/P				        ORIGINAL OR RING MODULATION BY F0*(P-1)/P
//N					0				        ORIGINAL OR RING MODULATION BY F0*P/P=F0
//
//
// #### Usage
//
// ```
// _,_, ... : fxRingMod(n, f0, fa, tf) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs and outputs to the mirror function)
// * 'f0': the maximum delay applied (in samples)
// * 'fa': decorrelation factor (between 0 and 1)
// * 'tf': type of function of delay distribution (integer, between 0 and 21)
//-----------------------------

fxRingMod(n, f0, fa, tf) = par(i, 2*n+1, gate_ringmod(f0, i, 2*n+1, fa, tf))
	with{
		//
		env1(fa, i, n) = (fa > ((n-i-1)/n)) : si.smooth(ba.tau2pole(0.005));
		env1c(fa, i, n) = 1 - env1(fa, i, n);
		//
		gate_ringmod(f, i, n, fa, tf) = _ <: _ * os.osccos(freq(f, i, n, tf)) * env1(fa, i, n), _ * env1c(fa, i, n) : +	;
		//
		ringmodfreq(f, i, n, tf, ind) = (tf == ind) * f * x * coef
			with {
				x = th(ind, i, n);
				coef = min(1, max(n * (fa - (n - i - 1) / n), 0)); 		
			};
			//
		freq(f, i, n, tf) = sum(ind, 22, ringmodfreq(f, i, n, tf, ind)) : int ; 
};

//-------`(ho.).synRingMod`----------
// Spatial ring modulation in syn mode

// `synRingMod` is a standard Faust function.
//
// synRingMod generates spatial components in amibsonics from one mono signal thanks to ring modulation.
// The ring modulation is defined for each spatial component among P=2*n+1 at the abmisonic order n.
// For each spatial component #i, the result is either the original signal or a ring modulated signal
// according to a threshold that is i/P.
// The general process is drive by a factor fa between 0 and 1 and a modulation frequency f0.
// if fa is greater than theshold (P-i-1)/P, the ith ring modulator is on with carrier frequency of f0*(i+1)/P.
// On the contrary, it provides the original signal.
// Therefore ring modulators are progressively revealed when fa increases.
// When the factor is between [0; 1/P], upper harmonics are progressively faded and the level of the H0 component is compensated
// to avoid source localization and to produce a large mono.
//
//H					THRESHOLD			    OUTPUT
//0					(P-1)/P					ORIGINAL OR RING MODULATION BY F0*1/P
//-1				(P-2)/P					ORIGINAL OR RING MODULATION BY F0*2/P
//1					(P-3)/P			        ORIGINAL OR RING MODULATION BY F0*3/P
//-2				(P-4)/P			        ORIGINAL OR RING MODULATION BY F0*4/P
//2					(P-5)/P			        ORIGINAL OR RING MODULATION BY F0*5/P
//...
//-(N-1)			3/P				        ORIGINAL OR RING MODULATION BY F0*(P-3)/P
//(N-1)				2/P				        ORIGINAL OR RING MODULATION BY F0*(P-2)/P
//-N				1/P				        ORIGINAL OR RING MODULATION BY F0*(P-1)/P
//N					0				        ORIGINAL OR RING MODULATION BY F0*P/P=F0
//
//
// #### Usage
//
// ```
// _,_, ... : synRingMod(n, f0, fa, tf) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 inputs and outputs to the mirror function)
// * 'f0': the maximum delay applied (in samples)
// * 'fa': decorrelation factor (between 0 and 1)
// * 'tf': type of function of delay distribution (integer, between 0 and 21)
//-----------------------------

synRingMod(n, f0, fa, tf) = _ <: par(i, 2*n+1, crossfade_ringmod(f0, i, 2*n+1, fa, tf))
	with{
		//
		env1(fa, i, n) = (fa > ((n-i-1)/n)) : si.smooth(ba.tau2pole(0.005));
		env1c(fa, i, n) = 1 - env1(fa, i, n);
		env2(fa, i, n) = ((i > 0) * n * min(fa, 1/n)) + ((i == 0) * (sqrt(n) * (1 - (n - sqrt(n)) * min(fa, 1/n)))) : si.smooth(ba.tau2pole(0.005));
		//
		crossfade_ringmod(f, i, n, fa, tf) = _ <: _ * os.osccos(freq(f, i, n, tf)) * env1(fa, i, n), _ * env1c(fa, i, n) :> _ * env2(fa, i, n);	
		//
		ringmodfreq(f, i, n, tf, ind) = (tf == ind) * f * x * coef
			with {
				x = th(ind, i, n);
				coef = min(1, max(n * (fa - (n - i - 1) / n), 0)); 		
			};
			//
		freq(f, i, n, tf) = sum(ind, 22, ringmodfreq(f, i, n, tf, ind)) : int ; 
};

//-------`(ho.)optim3D`----------
// Ambisonic optimizer including the three elementary optimizers:
// - (ho).optimBasic3D, (ho).optimMaxRe3D, (ho.)optimInPhase3D
//----------------`optimBasic3D`-------------------------
//The basic optimization has no effect and should be used for a perfect 
//circle of loudspeakers with one listener at the perfect center loudspeakers 
//array.
//----------------`optimMaxRe3D`-------------------------
//The maxRe optimization optimize energy vector. It should be used for an 
//auditory confined in the center of the loudspeakers array.
//----------------`optimInPhase3D`-------------------------
//The inPhase Optimization optimize energy vector and put all loudspeakers signals 
//in phase. It should be used for an auditory.

// `optim3D` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_, ... : optim3D(n, ot) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order in 3D (there are (n+1)*(n+1) inputs and outputs to the optim function)
// * 'ot' : optimization type (0 for optimBasic, 1 for optimMaxRe, 2 for optimInPhase)
//-----------------------------

optim3D(n, ot) = thisOptimizer
	with {
			optb = (ot == 0) : si.smoo;
			optm = (ot == 1) : si.smoo;
			opti = (ot == 2) : si.smoo;
			bus3D = si.bus((n+1)*(n+1));
			interlace(n) = si.bus(2*n) <: par(i, n, (ba.selector(i, 2*n), ba.selector(i+n, 2*n)));
			thisOptimizer = ((bus3D  <: ((bus3D:ho.optimBasic3D(n)), (bus3D:ho.optimMaxRe3D(n)), (bus3D:ho.optimInPhase(n)))), ((optb <: bus3D), (optm <: bus3D), (opti <: bus3D))) : interlace(3*(n+1)*(n+1)) : par(i, 3*(n+1)*(n+1), *) :> bus3D;
};



//nouvel encoder3D optimisé sur les calculs de factorielles//
//
//----------------------`(ho.)encoder3D`---------------------------------
// Ambisonic encoder. Encodes a signal in the circular harmonics domain
// depending on an order of decomposition, an angle and an elevation.
//
// #### Usage
//
// ```
// encoder3D(n, x, a, e) : _
// ```
//
// Where:
//
// * `n`: the order (works with n <= 8)
// * `x`: the signal
// * `a`: the angle
// * `e`: the elevation
//----------------------------------------------------------------

encoder3D(n, x, theta, phi) = par(i, (n+1) * (n+1), x * y(degree(i), order(i), theta, phi))
with {
	// The degree l of the harmonic[l, m]	
	degree(index) = int(sqrt(index));
	// The order m of the harmonic[l, m]	
	order(index) = int(index - int(degree(index) * int(degree(index) + 1)));

	// The spherical harmonics
	y(l, m, theta, phi) =  e(m, theta2) * k(l, m) * p(l, m, cos(phi + ma.PI * 0.5))
	with {	
		//theta2 enables a continuous movement of elevation (when phi becomes greater than Pi/2)
		theta2 = theta + (1 - int(fmod(fmod(phi / ma.PI - 0.5, 2) + 2, 2))) * ma.PI;
		//
		// The associated Legendre polynomial
		// If l = 0   => p = 1
		// If l = m   => p = -1 * (2 * (l-1) + 1) * sqrt(1 - cphi*cphi) * p(l-1, l-1, cphi)
		// If l = m+1 => p = phi * (2 * (l-1) + 1) * p(l-1, l-1, cphi)
		// Else => p = (cphi * (2 * (l-1) + 1) * p(l-1, abs(m), cphi) - ((l-1) + abs(m)) * p(l-2, abs(m), cphi)) / ((l-1) - abs(m) + 1)
		p(l, m, cphi) = pcalcul(((l != 0) & (l == abs(m))) + ((l != 0) & (l == abs(m)+1)) * 2 + ((l != 0) & (l != abs(m)) & (l != abs(m)+1)) * 3, l, m, cphi)
		with {
			pcalcul(0, l, m, cphi) = 1;
			pcalcul(1, l, m, cphi) = -1 * (2 * (l-1) + 1) * sqrt(1 - cphi*cphi) * p(l-1, l-1, cphi);
			pcalcul(2, l, m, cphi) = cphi * (2 * (l-1) + 1) * p(l-1, l-1, cphi);
			pcalcul(s, l, m, cphi) = (cphi * (2 * (l-1) + 1) * p(l-1, abs(m), cphi) - ((l-1) + abs(m)) * p(l-2, abs(m), cphi)) / ((l-1) - abs(m) + 1);
		};	

		// The exponential imaginary
		// If m > 0 => e^i*m*theta = cos(m * theta)
		// If m < 0 => e^i*m*theta = sin(-m * theta)
		// If m = 0 => e^i*m*theta = 1
		e(m, theta) = ecalcul((m > 0) * 2 + (m < 0), m, theta)
		with {
			ecalcul(2, m, theta) = cos(m * theta);
			ecalcul(1, m, theta) = sin(abs(m) * theta);
			ecalcul(s, m, theta) = 1;
		}; 
		
		// The normalization
		// If m  = 0 => k(l, m) = 1
		// If m != 0 => k(l, m) = sqrt((l - abs(m))! / l + abs(m))!) * sqrt(2)
		k(l, m) = kcalcul((m != 0), l, m)
		with {	
			kcalcul(0, l, m) = 1;
			kcalcul(1, l, m) = sqrt(2) / sqrtFactQuotient(l+abs(m), l-abs(m))
				with {
						//factorial quotient fq(n, p)=n! / p! = n(n-1)...(p+1) when n > p
						//enables factor simplification
						//and considering the square root of a product as a product of square roots
						sqrtFactQuotient(n, p) = sqrtProd(n-p, p)
						with {
								//sqrtProd(n, p) computes the product sqrt(p+1) x sqrt(p+2) x ... x sqrt(n)
								//to enable factorial quotient simplification
								sqrtProd(1, p) = sqrt(p+1);
								sqrtProd(n, p) = sqrt(p+n) * sqrtProd(n-1, p);
						};
			};
		};		
	};
};

//-------`(ho.)rEncoder3D`----------
// Ambisonic encoder in 3D including source rotation
// a mono signal is encoded at at certain ambisonic order
// with two possible modes: either rotation with 2 angular speeds (azimuth and elevation), or static with a fixed pair of angles.

// `rEncoder3D` is a standard Faust function.
//
// #### Usage
//
// ```
// _ : rEncoder3D(n, azsp, elsp, az, el, it) : _,_, ...
// ```
//
// Where:
//
// * `n`: the ambisonic order (there are 2*n+1 outputs to the encoder2 function)
// * `azsp': the azimuth speed expressed as angular speed (2PI/sec)
// * `elsp': the elevation speed expressed as angular speed (2PI/sec)
// * `az`: the fixed azimuth when the azimuth rotation stops (azsp = 0) in radians
// * `el`: the fixed elevation when the elevation rotation stops (elsp = 0) in radians
// * 'it' : interpolation time (in milliseconds) between the rotation and the fixed modes.
//-----------------------------

rEncoder3D(n, azsp, elsp, az, el, it) = this3DEncoder
with {
		basic3DEncoder(sig, ang1, ang2) = encoder3D(n, sig, ang1, ang2);
		this3DEncoder = (_, rotationOrStaticAzim, rotationOrStaticElev) : basic3DEncoder
			with {
				x1 = (os.phasor(1, azsp), az, 1) : (+, _) : fmod : *(2 * ma.PI); 
				vn1 = (azsp == 0) : si.smooth(ba.tau2pole(it));
				rotationOrStaticAzim = (1-vn1) * x1 + vn1 * az;
				x2 = (os.phasor(1, elsp), el, 1) : (+, _) : fmod : *(2 * ma.PI); 
				vn2 = (elsp == 0) : si.smooth(ba.tau2pole(it));
				rotationOrStaticElev =  (1-vn2) * x2 + vn2 * el;
			};
};


//--------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------//
//
//TYPES OF DISTRIBUTIONS: 22 EASING FUNCTIONS FROM [0, 1] to [0,1]
//(i+1)/p belongs to [0, 1] and its image by any function in the list also belongs to the interval
//
//--------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------//
//

th(0, i, p) = (i+1) / p;
th(1, i, p) = ((i+1) / p)^2;
th(2, i, p) = sin(ma.PI * 0.5 * (i+1) / p);
th(3, i, p) = log10(1 + (i+1) / p) / log10(2);
th(4, i, p) = sqrt((i+1) / p);
th(5, i, p) = 1 - cos(ma.PI * 0.5 * (i+1) / p);
th(6, i, p) = (1 - cos(ma.PI * (i+1) / p)) * 0.5;
th(7, i, p) = 1 - (1 - (i+1) / p )^2;
th(8, i, p) = ((i+1) / p < 0.5) * 2 * ((i+1) / p)^2 + ((i+1) / p >= 0.5) * (1 - (-2 * (i+1) / p + 2)^2 * 0.5) ;
th(9, i, p) = ((i+1) / p)^3 ;
th(10, i, p) = 1 - (1 - (i+1) / p)^3 ;
th(11, i, p) = ((i+1) / p < 0.5) * 4 * ((i+1) / p)^3 + ((i+1) / p >= 0.5) * (1 - (-2 * (i+1) / p + 2)^3 * 0.5) ;
th(12, i, p) = ((i+1) / p)^4 ; 
th(13, i, p) = 1 - (1 - (i+1) / p)^4 ;
th(14, i, p) = ((i+1) / p < 0.5) * 8 * ((i+1) / p)^4 + ((i+1) / p >= 0.5) * (1 - (-2 * (i+1) / p + 2)^4 * 0.5) ;
th(15, i, p) = ((i+1) / p)^5 ; 
th(16, i, p) = 1 - (1 - (i+1) / p)^5 ;
th(17, i, p) = ((i+1) / p < 0.5) * 16 * ((i+1) / p)^5 + ((i+1) / p >= 0.5) * (1 - (-2 * (i+1) / p + 2)^5 * 0.5) ;
th(18, i, p) = 2^(10 * (i+1) / p - 10) ;
th(19, i, p) = ((i+1) / p < 1) * (1 - 2^(-10 * (i+1) / p)) + ((i+1) / p == 1) ;
th(20, i, p) = 1 - sqrt(1 - ((i+1) / p)^2) ; 
th(21, i, p) = sqrt(1 - ((i+1) / p - 1)^2) ;
